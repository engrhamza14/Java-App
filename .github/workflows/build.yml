name: Spring Boot Build and Upload

on:
  push:
    branches:
      - main

jobs:
  build_and_upload:
    name: Build, Verify, and Upload
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up JDK 11
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Step 4: Build with Maven
      - name: Build with Maven
        run: mvn clean install package

      # Step 5: Verify Build Output
      - name: Verify Build Output
        run: |
          echo "Verifying that the JAR file was created..."
          ls -l target/*.jar || (echo "No JAR file found!" && exit 1)

      # Step 6: Set up JFrog CLI
      - name: Set up JFrog CLI
        run: |
          curl -fL https://getcli.jfrog.io | sh
          sudo mv jfrog /usr/local/bin

      # Step 7: Configure JFrog CLI
      - name: Configure JFrog CLI
        env:
          JFROG_URL: ${{ secrets.JFROG_URL }}
          JFROG_USER: ${{ secrets.JFROG_USER }}
          JFROG_API_KEY: ${{ secrets.JFROG_API_KEY }}
        run: |
          jfrog config add my-server \
            --artifactory-url=$JFROG_URL \
            --user=$JFROG_USER \
            --apikey=$JFROG_API_KEY \
            --interactive=false

      # Step 8: Verify JFrog CLI Configuration
      - name: Verify JFrog CLI Configuration
        run: |
          jfrog config show

      # Step 9: Upload the build artifact to JFrog Artifactory
      - name: Upload Artifacts to Artifactory
        run: |
          jfrog rt upload "target/*.jar" artifactory-repo/libs-release-local/ \
            --server-id=my-server
